#------------------------------------------ IMPORT PACKAGES -----------------------------------------

import time
from itertools import accumulate

#-------------------------------------------- CONSTANTS ---------------------------------------------

I2C_FREQ = 400000                                                                   # I2C frequency 400 kHz
I2C_TEF6686 = 0x64                                                                  # I2C address of TEF6686

TUNER_PATCH_BYTES = [b'\x03\x1c\x00\x00',
b'\x03\x1C\x00\x74',
b'\x19\x1B\xF0\x00\x38\x38\xD0\x80\xF0\x00\x38\x40\xD0\x80\x43\xB2\x38\x43\xD0\x80\xF0\x00\x70\x00\xC2\xF7',
b'\x19\x1B\xF0\x00\x38\x74\xD0\x80\x80\xFC\x39\x17\xD0\x80\xC2\x38\x20\x11\x40\xB7\x9F\xA7\x39\x1C\xD2\x80',
b'\x19\x1B\x9F\xA7\x39\x26\xD2\x80\xF0\x00\x39\x2D\xD0\x80\xF0\x00\x39\x30\xD0\x80\x90\x41\x39\x52\xDD\x80',
b'\x19\x1B\xF0\x00\x3A\x29\xD0\x80\xF0\x00\x39\x56\xD0\x80\xF0\x00\x3A\x2B\xD0\x80\xC4\xA2\x02\x16\x60\x04',
b'\x19\x1B\xF0\x00\x39\xC3\xD0\x80\xF0\x00\x39\xEB\xD0\x80\x90\x01\x39\x58\xD0\x80\xF0\x00\x38\xF9\xD0\x80',
b'\x19\x1B\xF0\x00\x39\x5F\xD2\x80\xF0\x00\x39\x63\xD0\x80\x43\x84\x39\x6D\xD0\x80\xF0\x00\x39\x70\xD0\x80',
b'\x19\x1B\xF0\x00\x39\x74\xD0\x80\x9E\x30\x18\xF9\xD2\x80\xF0\x00\x39\x7A\xD0\x80\xF0\x00\x39\x7D\xD0\x80',
b'\x19\x1B\x30\x77\x39\xE2\xD0\x80\xF0\x00\x39\x80\xD0\x80\x32\x00\x39\x82\xD0\x80\xF0\x00\x39\x84\xD0\x80',
b'\x19\x1B\xF0\x00\x39\xCB\xD0\x80\xF0\x00\x39\xF9\xD0\x80\xA8\x01\x3A\x17\xD0\x80\xF0\x00\x3A\x36\xD0\x80',
b'\x19\x1B\xF0\x00\x3A\x3D\xD0\x80\xF0\x00\x3A\x3F\xD0\x80\xF0\x00\x3A\x53\xD0\x80\xF0\x00\x3A\x56\xD0\x80',
b'\x19\x1B\xF0\x00\x3A\x59\xD0\x80\xF0\x00\x3A\x5C\xD0\x80\xF0\x00\x70\x00\xF0\x00\xF0\x00\x3A\x61\xD0\x80',
b'\x19\x1B\xF0\x00\x3A\x22\xD2\x80\xF0\x00\x3A\x6F\xD0\x80\x00\x43\x3A\x7E\xD9\x80\xF0\x00\x3A\x88\xD0\x80',
b'\x19\x1B\xF0\x00\x3A\xDE\xD0\x80\xF0\x00\x3A\xE1\xD0\x80\xF0\x00\x3A\xF2\xD0\x80\x2E\x40\x3B\x90\xD0\x80',
b'\x19\x1B\xF0\x00\x3B\x9A\xD0\x80\xF0\x00\x0E\x3F\x60\x00\x50\x10\x28\xD8\xD2\x80\x91\x01\x01\x36\x60\x00',
b'\x19\x1B\xF0\x00\x70\x00\xA0\x18\xF0\x00\x70\x00\xA0\xD8\xF0\x00\x70\x00\xA0\xF9\xF0\x00\x70\x00\xA1\xB5',
b'\x19\x1B\xF0\x00\x70\x00\xA2\x09\xF0\x00\x70\x00\xA2\x34\xF0\x00\x70\x00\xA2\x4C\xF0\x00\x20\x31\xD0\x80',
b'\x19\x1B\xF0\x00\x04\xC1\x60\x08\xF0\x00\x01\x01\xD2\x80\xF0\x00\x00\x30\xD0\x80\x00\x7F\x60\x02\xE2\x00',
b'\x19\x1B\xF0\x00\x0E\x22\x60\x0A\xF0\x00\x00\xFF\x60\x03\xF0\x00\x01\x42\xD2\x80\x90\x03\x40\x02\xF0\x00',
b'\x19\x1B\x90\x43\x01\x70\xD1\x80\xF0\x00\x01\x69\xD0\x80\x0E\x69\x60\x0A\xA3\x52\x20\x23\x00\x01\x60\x01',
b'\x19\x1B\xF0\x00\x70\x00\xF0\x00\xC4\xCB\x70\x00\xF0\x00\xCA\x09\x30\x23\xF0\x00\xC2\xCB\x70\x00\xF0\x00',
b'\x19\x1B\xF0\x00\x30\x23\xD0\x08\x82\x00\x0D\x50\x60\x08\xF0\x00\x0D\x51\x60\x09\x30\x00\x21\x80\x60\x01',
b'\x19\x1B\xF0\x00\x40\x32\xF0\x00\x30\x11\x45\xF3\xF0\x00\x30\x92\x2D\x30\x60\x04\x31\x13\x2D\x40\x60\x05',
b'\x19\x1B\x31\x94\x7F\xFF\x60\x06\x32\x15\x0D\x61\x60\x0A\x32\x96\x0D\x6B\x60\x0B\x33\x10\x0D\x50\x60\x01',
b'\x19\x1B\x33\x90\x0D\x5C\x60\x02\x30\x21\x0D\x63\x60\x03\x30\x31\x0D\x75\x60\x0C\x30\xA2\x8D\x00\x60\x01',
b'\x19\x1B\x30\xB3\x01\x73\x60\x02\x30\x41\x00\x25\x60\x03\x30\xC2\x40\x44\xF0\x00\x31\x43\x40\x35\xF0\x00',
b'\x19\x1B\x31\xC4\x64\x00\x60\x06\x32\x45\x1F\x40\x60\x07\x32\xC6\x70\x00\xF0\x00\x33\x47\x1E\xBC\x60\x0D',
b'\x19\x1B\x33\xC0\x01\x22\x60\x01\x34\x40\xFD\xEE\x60\x02\x30\x51\x7B\x8F\x60\x03\x30\xD2\xC4\x29\x60\x04',
b'\x19\x1B\x31\x51\x1E\xC2\x60\x0E\x32\x53\xFF\x0D\x60\x02\x32\xD4\x7D\x2E\x60\x03\x30\x61\xC1\x9A\x60\x04',
b'\x19\x1B\x30\xE2\x70\x00\xF0\x00\x31\x61\x70\x00\xF0\x00\x32\x63\x70\x00\xF0\x00\x32\xE4\x70\x00\xD0\x08',
b'\x19\x1B\xF0\x00\x03\x70\xD2\x80\xF0\x00\x70\x00\xA0\x02\xF0\x00\x70\x00\xA0\x59\xF0\x00\x02\x15\xD0\x80',
b'\x19\x1B\xF0\x00\x0D\x51\x60\x0F\xF0\x00\x05\x17\x60\x0E\x23\xF6\x70\x00\xF0\x00\xF0\x00\x21\x63\x41\xF5',
b'\x19\x1B\x91\x8F\x21\xF8\x40\x74\xC3\xEF\x21\xE0\xF0\x00\xC3\xA4\x33\xF7\xF0\x00\xD8\x5B\x70\x00\xF0\x00',
b'\x19\x1B\x82\x18\x70\x00\xF0\x00\x9F\xAF\x18\x00\xF0\x00\x9F\x0F\x31\xF8\x90\x02\xF0\x00\x70\x00\x90\x28',
b'\x19\x1B\xF0\x00\x70\x00\xD0\x08\xF0\x00\x22\x78\xF0\x00\x16\xD3\x60\x09\xA0\x7F\x35\xF0\x1E\xBC\x60\x0D',
b'\x19\x1B\xF0\x00\x0D\x61\x60\x08\xF0\x00\x03\xA5\xD2\x80\xF0\x00\x1E\xC2\x60\x0D\xF0\x00\x0D\x6B\x60\x08',
b'\x19\x1B\xF0\x00\x03\xA5\xD2\x80\xF0\x00\x21\x00\xF0\x00\x83\x6D\x22\xF1\xF0\x00\xF0\x00\x23\x77\xF0\x00',
b'\x19\x1B\x90\x41\x36\x70\xF0\x00\x9E\x79\x70\x00\x90\x01\xF0\x00\x32\xF1\xD0\x08\x91\xC7\x33\x75\xF0\x00',
b'\x19\x1B\xF0\x00\x34\x70\xE6\x00\xF0\x00\x34\xF0\xE6\x00\xF0\x00\x24\x74\xF0\x00\xF0\x00\x24\xF3\xF0\x00',
b'\x19\x1B\x8C\x24\x26\xF2\x40\x16\x8A\x1B\x34\x74\x4F\xF5\x82\xB7\x34\xF3\xF0\x00\xF0\x00\x20\x71\x90\x05',
b'\x19\x1B\x83\x04\x70\x00\xF0\x00\x8E\x67\x70\x00\xF0\x00\xF0\x00\x70\x00\x90\x02\xF0\x00\x36\xF6\xF0\x00',
b'\x19\x1B\xF0\x00\x34\xF0\x80\x06\x82\xAF\x70\x00\xF0\x00\x82\x1B\x70\x00\xD0\x09\x8E\x5F\x70\x00\xF0\x00',
b'\x19\x1B\xF0\x00\x70\x00\xD0\x09\xF0\x00\x36\xF5\xF0\x00\xF0\x00\x34\x70\xF0\x00\x40\x11\x27\x72\xA2\xF5',
b'\x19\x1B\x90\x8A\x20\xF3\xA2\xF4\x8E\xD7\x37\x72\xF0\x00\xF0\x00\x37\xF1\xE6\x00\xF0\x00\x70\x00\xD0\x08',
b'\x19\x1B\xF0\x00\x22\x7A\xF0\x00\x16\xC3\x60\x09\xA0\x58\xF0\x00\x18\x20\xF0\x00\xF0\x00\x35\x70\xF0\x00',
b'\x19\x1B\xF0\x00\x32\x7A\xD0\x08\x82\x00\x0D\x51\x60\x08\x40\x03\x70\x00\xF0\x00\x33\x80\x70\x00\xF0\x00',
b'\x19\x1B\x21\x06\x70\x00\xF0\x00\x37\x00\x70\x00\xF0\x00\x37\x80\x40\x15\xF0\x00\x36\x83\x70\x00\xF0\x00',
b'\x19\x1B\x33\x05\x0D\x61\x60\x09\x32\x86\x0D\x6B\x60\x0A\x32\x10\x70\x00\xF0\x00\x32\x90\x70\x00\xF0\x00',
b'\x19\x1B\x33\x10\x70\x00\xF0\x00\x33\x90\x70\x00\xF0\x00\x34\x10\x70\x00\xF0\x00\x34\x90\x70\x00\xF0\x00',
b'\x19\x1B\x31\x10\x70\x00\xF0\x00\x31\x90\x70\x00\xF0\x00\x32\x20\x70\x00\xF0\x00\x32\xA0\x70\x00\xF0\x00',
b'\x19\x1B\x33\x20\x70\x00\xF0\x00\x33\xA0\x70\x00\xF0\x00\x34\x20\x70\x00\xF0\x00\x34\xA0\x70\x00\xF0\x00',
b'\x19\x1B\x31\x20\x70\x00\xF0\x00\x31\xA0\x70\x00\xF0\x00\x82\x00\x0D\x30\x60\x0A\x0D\x40\x60\x0B\xC0\x10',
b'\x19\x1B\xF0\x00\x10\x20\xF0\x00\x0D\x51\x60\x0C\xC0\x10\xF0\x00\x10\x30\xF0\x00\xF0\x00\x35\xC0\xD0\x08',
b'\x19\x1B\xF0\x00\x0D\x75\x60\x0F\xF0\x00\x05\x63\x60\x0E\x24\xF7\x05\x1D\x60\x0D\x25\x76\x70\x00\xF0\x00',
b'\x19\x1B\x91\xC7\x20\xE8\x40\x15\x91\x8F\x21\xE9\xD4\x09\xC3\xEF\x20\x00\x40\x12\x9F\xBE\x20\x11\x58\x03',
b'\x19\x1B\xA0\x80\x35\x77\x90\x01\xF0\x00\x70\x00\xD0\x08\xF0\x00\x21\xF5\xF0\x00\xA0\xCA\x22\x54\xF0\x00',
b'\x19\x1B\xCC\x09\x05\x17\x60\x0C\x83\x2C\x70\x00\xF0\x00\x8A\x61\x70\x00\xF0\x00\xAE\x48\x22\x45\xA2\xBD',
b'\x19\x1B\xA2\x28\x20\x78\xF0\x00\xF0\x00\x35\xF0\xF0\x00\xF0\x00\x18\x00\xF0\x00\xF0\x00\x30\x78\xF0\x00',
b'\x19\x1B\x16\xE3\x60\x09\xA0\x27\x89\x01\x23\xF4\xF0\x00\xF0\x00\x20\xF2\xF0\x00\x82\x61\x21\x73\xF0\x00',
b'\x19\x1B\xA0\x50\x36\x70\xF0\x00\xA0\x58\x23\x72\xE1\x40\xA8\x01\x22\xF3\xF0\x00\x90\x49\x22\x75\xE0\x40',
b'\x19\x1B\x80\x61\x70\x00\xF0\x00\x8A\x51\x33\xF1\xF0\x00\xA0\x58\x70\x00\xF0\x00\xAF\x48\x70\x00\xF0\x00',
b'\x19\x1B\xF0\x00\x34\x70\xD0\x08\x82\x00\x0D\x75\x60\x08\x90\x09\x0D\x00\x60\x09\xF0\x00\x35\x00\xF0\x00',
b'\x19\x1B\xF0\x00\x33\x80\xC0\x28\xF0\x00\x10\x10\xF0\x00\xF0\x00\x34\x81\xD0\x08\x82\x49\x0D\x75\x60\x08',
b'\x19\x1B\xF0\x00\x70\x00\x8F\xFD\x04\x00\x60\x00\xA2\xA3\x8E\xC0\x40\x00\x60\x05\x60\x00\x60\x05\xE6\x00',
b'\x19\x1B\xC8\x1B\x70\x00\xF0\x00\xD8\xDB\x0D\x51\x60\x08\x83\x5B\x70\x00\xF0\x00\x9E\xBA\x30\x03\xF0\x00',
b'\x19\x1B\xF0\x00\x30\x84\xD4\x09\xF0\x00\x70\x00\x8F\xAF\xF0\x00\x0D\x75\x60\x08\xF0\x00\x0D\x51\x60\x09',
b'\x19\x1B\xF0\x00\x24\x03\xF0\x00\xF0\x00\x27\x94\xD0\x08\xA0\x03\x70\x00\xF0\x00\x00\x11\x08\x00\xF0\x00',
b'\x19\x1B\x00\x11\x08\x00\xC0\x0E\xA0\x09\x00\x11\x08\x00\xA0\x09\x70\x00\xF0\x00\xA4\x08\x70\x00\xD0\x08',
b'\x19\x1B\xA0\x03\x70\x00\xF0\x00\x00\x11\x08\x00\xF0\x00\x00\x11\x08\x00\xC0\x26\xA0\x09\x00\x11\x08\x00',
b'\x19\x1B\xA0\x09\x70\x00\xF0\x00\xA4\x08\x70\x00\xD0\x08\xF0\x00\x1D\x01\x60\x08\xF0\x00\x0A\x2C\x60\x00',
b'\x19\x1B\xF0\x00\x01\x1A\x60\x01\x31\x00\x70\x00\xF0\x00\x31\x81\x70\x00\xD0\x08\xA8\x01\x7F\xFF\x60\x06',
b'\x19\x1B\xCC\x0A\x70\x00\xF0\x00\x8E\xA1\x31\x06\xF0\x00\xF0\x00\x32\x06\xD4\x09\xAE\xE8\x04\xDF\xD0\x80',
b'\x19\x1B\x90\x87\x70\x00\x98\x07\xF0\x00\x0F\xB1\xD2\x80\x9E\x08\x41\x89\x60\x06\x14\x92\x60\x00\x90\x04',
b'\x19\x1B\xA1\x98\x1D\x01\x60\x08\xAA\x56\x70\x00\xF0\x00\xA2\x20\x32\x06\xF0\x00\xF0\x00\x32\x80\xF0\x00',
b'\x19\x1B\x91\xC2\x06\x9A\x60\x08\x41\xE6\x06\x00\xD0\x80\x82\x13\x70\x00\xD8\x09\xF0\x00\x0F\xB1\xD2\x80',
b'\x19\x1B\x9E\x08\x10\x62\x60\x01\x05\x1F\x60\x05\xD0\x09\xF0\x00\x06\xE6\x60\x08\xA3\x65\x70\x00\xF0\x00',
b'\x19\x1B\xF0\x00\x30\x85\xD0\x08\x10\x00\x60\x03\xA2\x6F\x30\x23\x07\x73\xD2\x80\xF0\x00\x07\xC6\xD0\x80',
b'\x19\x1B\x08\x00\x60\x03\xA0\x02\x0E\x6F\x60\x09\xF0\x00\x02\x00\x60\x03\x80\x00\xF0\x00\x07\x73\xD0\x80',
b'\x19\x1B\x40\xE0\x00\x1F\x60\x01\x13\xD5\x60\x07\xA0\x11\x90\x40\x70\x00\xF0\x00\x13\xFB\x60\x06\xA0\x0E',
b'\x19\x1B\x14\x05\x60\x06\xA0\x0D\x14\x0F\x60\x06\xA0\x0C\x45\x60\x00\x3A\x60\x01\x13\xB6\x60\x07\xA0\x0B',
b'\x19\x1B\x90\x40\x70\x00\xF0\x00\x13\xF7\x60\x06\xA0\x08\x14\x01\x60\x06\xA0\x07\x14\x0B\x60\x06\xA0\x06',
b'\x19\x1B\x41\x80\x00\x3B\x60\x01\x13\xB6\x60\x07\xA0\x05\x90\x40\x70\x00\xF0\x00\x13\xF7\x60\x06\xA0\x02',
b'\x19\x1B\x14\x01\x60\x06\xA0\x01\x14\x0B\x60\x06\x80\x00\xF0\x00\x0D\x28\xD0\x80\xD7\xCA\x00\xFF\x60\x04',
b'\x19\x1B\x81\xD7\x0C\xF7\x60\x09\xD0\x56\x70\x00\xF0\x00\x82\x76\x30\x17\xF0\x00\xD0\xF6\x40\x83\xF0\x00',
b'\x19\x1B\xC1\xA4\x20\x19\xF0\x00\x82\xF6\x70\x00\xF0\x00\xC1\x80\x20\x17\xA2\x4E\xC3\xE7\x70\x00\xF0\x00',
b'\x19\x1B\xC5\xC7\x70\x00\xF0\x00\xF0\x00\x30\x17\xD0\x08\x9A\x78\x70\x00\xF0\x00\x9A\x70\x70\x00\x90\xDE',
b'\x19\x1B\xF0\x00\x70\x00\x90\xDE\xF0\x00\x0D\x67\xD0\x80\xF0\x00\x70\x00\xA1\x14\xF0\x00\x70\x00\x80\xCD',
b'\x19\x1B\x1E\xC8\x60\x08\xA2\x44\xF0\x00\x20\x00\xA2\x43\x90\x00\x70\x00\xF0\x00\xF0\x00\x70\x00\xD4\x09',
b'\x19\x1B\xF0\x00\x70\x00\x8F\xA5\x1E\xC8\x60\x08\xA2\x3F\xF0\x00\x30\x00\xD0\x08\x00\x28\x60\x00\xA2\x3D',
b'\x19\x1B\x9E\x38\x0E\xF4\x60\x09\x9E\x38\x70\x00\x9F\xFF\xF0\x00\x70\x00\xD0\x08\x40\x40\x0C\x8A\xD5\x80',
b'\x19\x1B\xF0\x00\x0C\x8B\xD2\x80\xF0\x00\x0F\xB1\xD2\x80\x9C\x39\x70\x00\xF0\x00\x9C\x31\x70\x00\x90\x03',
b'\x19\x1B\xF0\x00\x70\x00\x90\x02\x40\x10\x70\x00\xAF\xF3\x41\xF1\x40\x40\x80\x0D\x40\x00\x70\x00\xAF\xF1',
b'\x19\x1B\x41\xF1\x40\x40\x80\x0C\x03\xE8\x60\x02\xA2\x2F\x90\x83\x10\x44\xD1\x80\xF0\x00\x10\x42\xD0\x80',
b'\x19\x1B\x40\x71\x40\x20\xA0\x08\x43\xA1\x40\x30\xA0\x07\x43\xB1\x40\x30\xA0\x06\xF0\x00\x10\x75\xD0\x80',
b'\x19\x1B\x40\x71\x40\x20\xA0\x04\x43\xA1\x40\x30\xA0\x02\x43\xB1\x40\x30\xA0\x01\xF0\x00\x10\x81\xD0\x80',
b'\x19\x1B\xF0\x00\x0C\x92\xD0\x80\xF0\x00\x0C\x94\xD0\x80\xF0\x00\x0B\xC9\x60\x08\xF0\x00\x1D\x8D\xD2\x80',
b'\x19\x1B\xF0\x00\x16\xD5\xD0\x80\xF0\x00\x0B\xC9\x60\x08\xF0\x00\x1D\x8F\xD2\x80\xF0\x00\x16\xDA\xD0\x80',
b'\x19\x1B\x3E\x91\x1F\x5F\xD2\x80\xF0\x00\x23\x8A\xD0\x80\x0D\x85\x60\x08\xA2\x1A\xF0\x00\x30\x00\xD0\x08',
b'\x19\x1B\xF0\x00\x0F\x88\x60\x0B\xF0\x00\x02\x30\x60\x03\xF0\x00\x09\x38\x60\x04\x9F\x98\x01\x2C\x60\x05',
b'\x19\x1B\xF0\x00\x2E\xB3\xEE\x00\xF0\x00\x0F\xB1\xD2\x80\x9E\x09\x0D\x87\x60\x0C\x9F\x90\x70\x00\x90\x02',
b'\x19\x1B\x9F\x88\x2F\x34\xEE\x00\xF0\x00\x2F\xB5\xEE\x00\x30\x43\x0B\x42\x60\x08\xF0\x00\x30\xC4\xF0\x00',
b'\x19\x1B\xF0\x00\x31\x45\xF0\x00\xF0\x00\x2C\xB1\x40\x17\xF0\x00\x2D\x32\xF0\x00\xC6\x79\x22\x05\xF0\x00',
b'\x19\x1B\xF0\x00\x3D\x81\xF0\x00\xF0\x00\x3D\x01\xF0\x00\xDD\x6D\x1B\x93\xD2\x80\x90\x46\x0D\x85\x60\x0A',
b'\x19\x1B\x20\x42\x1B\x93\xD2\x80\xDA\xC9\x20\x25\xA2\x03\x8C\x69\x2D\xB3\xF0\x00\xDD\x49\x32\x01\xF0\x00',
b'\x19\x1B\x8D\x89\x70\x00\xF0\x00\x3C\x81\xFE\x35\x60\x00\x35\x81\x00\x16\x60\x01\xA0\x18\x21\x46\xF0\x00',
b'\x19\x1B\xAA\x07\x01\x2D\x60\x00\x81\xCF\x70\x00\xF0\x00\x8F\x80\x70\x00\xF0\x00\xF0\x00\x70\x00\x94\x02',
b'\x19\x1B\x40\x45\x57\x4B\x60\x00\xE0\x00\x60\x01\x80\x02\x40\x65\x40\x00\x60\x00\xC6\x66\x60\x01\x80\x00',
b'\x19\x1B\xA0\x30\x40\x00\x60\x04\xAF\x4E\x00\xA4\x60\x05\x81\x8E\x0B\x75\x60\x08\xF0\x00\x14\x74\xD2\x80',
b'\x19\x1B\xF0\x00\x1B\x90\xD2\x80\x2E\x34\x04\x00\x60\x06\x20\xC2\x1B\x93\xD2\x80\xD2\xC9\x03\xE9\x60\x05',
b'\x19\x1B\x81\x8E\x0B\x59\x60\x08\x8F\x2D\x31\xC6\xF0\x00\xF0\x00\x70\x00\x94\x02\x40\x45\xB1\x5C\x60\x03',
b'\x19\x1B\x46\x66\x60\x07\x80\x02\x40\x65\xAA\xCE\x60\x03\xC6\x66\x60\x07\x80\x00\xA0\xE0\x00\x38\x60\x04',
b'\x19\x1B\xAF\x48\x00\x1D\x60\x05\x81\xC7\x31\x84\xF0\x00\x31\x05\x14\x74\xD2\x80\xF0\x00\x1B\x90\xD2\x80',
b'\x19\x1B\xF0\x00\xD8\x00\x60\x00\xF0\x00\x0B\x67\x60\x08\x21\xC6\x20\x00\x60\x04\xF0\x00\x13\x33\x60\x05',
b'\x19\x1B\x81\x86\x31\x84\x40\x07\x31\x05\x14\x74\xD2\x80\xF0\x00\x1B\x90\xD0\x80\xF0\x00\x6E\x6C\x60\x03',
b'\x19\x1B\x40\x07\x00\xE5\x60\x05\xA0\x58\xFF\xFF\x60\x03\xAA\x24\x0B\x52\x60\x08\x81\x1C\x70\x00\xF0\x00',
b'\x19\x1B\x31\x05\x7F\xDF\x60\x06\x31\x84\x14\x74\xD2\x80\xF0\x00\x1B\x90\xD0\x80\x91\x83\x2E\x85\xF0\x00',
b'\x19\x1B\xF0\x00\x2F\x06\xF0\x00\xF0\x00\x2F\x87\xF0\x00\x0B\xC9\x60\x09\xA1\xCE\x3E\x11\x0D\x82\x60\x0A',
b'\x19\x1B\xF0\x00\x27\x11\xA1\xCC\xA0\x50\x27\x92\xF0\x00\xAA\x41\x0B\xB4\x60\x0C\x80\x52\x20\x21\xA1\xC9',
b'\x19\x1B\x9E\xCB\x35\x92\xF0\x00\x90\x41\x70\x00\xD8\x09\x88\x2D\x70\x00\xD4\x09\xF0\x00\x36\x15\xF0\x00',
b'\x19\x1B\xF0\x00\x36\x95\xF0\x00\x91\x00\x30\xA6\xF0\x00\x31\x27\x14\x62\xD2\x80\x90\x04\x31\xC0\xF0\x00',
b'\x19\x1B\x21\x45\x8C\xCD\x60\x06\xF0\x00\xFF\x55\x60\x07\xF0\x00\x14\x74\xD2\x80\xF0\x00\x32\x40\xF0\x00',
b'\x19\x1B\xF0\x00\x32\xC1\xF0\x00\xF0\x00\x33\x42\x80\x00\xF0\x00\x0D\x82\x60\x09\xF0\x00\x0B\xC9\x60\x0A',
b'\x19\x1B\xF0\x00\x20\x15\xA1\xB8\x91\x45\x7F\xEC\x60\x06\x40\x47\x70\x00\xD4\x09\x20\x90\x14\x47\xD2\x80',
b'\x19\x1B\xF0\x00\x34\xA0\xF0\x00\x21\x10\x14\x47\xD2\x80\xF0\x00\x35\x20\xD0\x08\x0A\x3D\x60\x07\xA1\xB1',
b'\x19\x1B\xA2\x79\x0B\xC9\x60\x09\xA2\xBA\x70\x00\xF0\x00\x90\xC0\x3B\x91\xF0\x00\x3B\x12\x14\x62\xD2\x80',
b'\x19\x1B\xF0\x00\x3C\x10\xD0\x08\xF0\x00\x0B\x60\x60\x0E\xF0\x00\x00\x04\x60\x03\x40\xA7\x3F\xFC\x60\x04',
b'\x19\x1B\x32\x63\x80\x08\x60\x05\x32\xE4\x19\x9A\x60\x06\x33\x65\x0D\x86\x60\x0F\x31\xE6\x70\x00\xF0\x00',
b'\x19\x1B\x30\x77\x70\x00\xD0\x08\x0D\x82\x60\x0A\xA1\xA3\xF0\x00\x30\x20\xF0\x00\x00\xD2\x60\x01\x94\x0B',
b'\x19\x1B\xF0\x00\x00\xD2\x60\x02\x00\xFA\x60\x03\xAF\xED\xF0\x00\xBE\x77\x60\x06\xF0\x00\x4B\x00\x60\x07',
b'\x19\x1B\x37\x06\x00\x01\x60\x01\x37\x87\x03\xE8\x60\x02\xF0\x00\x03\x84\x60\x04\xF0\x00\x00\x01\x60\x05',
b'\x19\x1B\xF0\x00\x00\x8C\x60\x06\xF0\x00\x0A\xF0\x60\x07\xF0\x00\x70\x00\x8F\xC7\xF0\x00\x0B\xB4\x60\x09',
b'\x19\x1B\xF0\x00\x00\x11\x60\x05\xF0\x00\x00\x11\x60\x06\x3B\x05\x10\x00\x60\x07\x3B\x86\x00\x04\x60\x00',
b'\x19\x1B\x3C\x07\xAD\x84\x60\x01\x32\x10\x01\xFD\x60\x02\x32\x91\x0B\x5E\x60\x03\x33\x12\x0C\x80\x60\x04',
b'\x19\x1B\x31\x93\x00\xA0\x60\x05\x34\x84\xFF\xD0\x60\x06\x35\x05\xE3\x54\x60\x07\x36\x06\x34\x00\x60\x00',
b'\x19\x1B\x36\x86\x00\x01\x60\x01\x37\x07\x03\xE8\x60\x02\x37\x80\x70\x00\x8F\xB7\x80\xE5\x7F\xFF\x60\x00',
b'\x19\x1B\xCC\x0A\x70\x00\xF0\x00\x8E\xA9\x33\x70\xF0\x00\xAF\x20\x34\x70\xD4\x09\xAE\xE8\x70\x00\xF0\x00',
b'\x19\x1B\xA8\x05\x00\x80\x60\x07\xA8\xF6\x33\x75\xF0\x00\xC3\x86\x70\x00\xF0\x00\x8F\x7F\x33\xF6\xF0\x00',
b'\x19\x1B\xA8\x85\x1D\xE4\xD1\x80\xF0\x00\x34\x75\xD0\x08\x0D\x86\x60\x09\xA1\x7A\x20\x12\x1F\x32\xD2\x80',
b'\x19\x1B\xF0\x00\x35\x82\xD0\x08\x90\x82\x0D\x86\x60\x09\x40\xA7\x40\x77\xE6\x40\xF0\x00\x70\x00\xF0\x00',
b'\x19\x1B\xF0\x00\x30\x17\xD0\x08\x0B\xB4\x60\x08\xA1\x73\xF0\x00\x31\x82\xD0\x08\xF0\x00\x09\x61\x60\x08',
b'\x19\x1B\xF0\x00\x09\xC9\x60\x09\xF0\x00\x21\x80\xF0\x00\xF0\x00\x20\x91\xA1\x6E\xA2\x08\x70\x00\xD0\x08',
b'\x19\x1B\x00\xCF\x60\x02\xA0\x01\x01\x51\x60\x02\x80\x01\x0D\x8B\x60\x08\x80\x01\x0D\x8C\x60\x08\x80\x00',
b'\x19\x1B\xF0\x00\x70\x00\xF0\x00\xF0\x00\x30\x02\xD0\x08\x0F\xF2\x60\x09\xA1\x66\x20\x11\x0D\x8B\x60\x0A',
b'\x19\x1B\xF0\x00\x2C\x92\xF0\x00\x90\x41\x20\x11\xF0\x00\xF0\x00\x70\x00\x93\xFE\xF0\x00\x70\x00\xF2\x00',
b'\x19\x1B\x31\x22\x20\x31\xD0\x80\x0D\x8B\x60\x08\xA0\x03\xF0\x00\x20\x22\xD0\x80\x0D\x8C\x60\x08\xA0\x01',
b'\x19\x1B\xF0\x00\x20\x1E\xD0\x80\xF0\x00\x70\x00\xF0\x00\x20\x00\x0E\x69\x60\x08\xF0\x00\x01\xD0\x60\x01',
b'\x19\x1B\xF0\x00\x30\x80\xF0\x00\xF0\x00\x30\x01\xD0\x08\x83\x6D\x0C\x35\x60\x08\x40\x60\x3A\x51\x60\x01',
b'\x19\x1B\x41\xE2\x21\x96\x60\x03\x33\x00\x41\x44\xF0\x00\x33\x81\x70\x00\xF0\x00\x34\x02\x70\x00\xF0\x00',
b'\x19\x1B\x34\x83\x0C\x29\x60\x09\x35\x04\x3A\x5F\x60\x00\x35\x85\x3A\x64\x60\x03\x30\x90\x70\x00\xF0\x00',
b'\x19\x1B\x33\x93\x70\x00\x8F\xDF\xF0\x00\x70\x00\xAE\x5F\xF0\x00\x70\x00\x8E\xA4\xF0\x00\x70\x00\xAE\x9D',
b'\x19\x1B\xF0\x00\x0C\x51\xD2\x80\xF0\x00\x21\xA0\xD0\x80\xF0\x00\x05\x2E\xD2\x80\xF0\x00\x70\x00\xA0\x0E',
b'\x19\x1B\xF0\x00\x21\xB7\xD0\x80\xF0\x00\x1F\x32\xD2\x80\xF0\x00\x1E\x84\xD2\x80\xF0\x00\x21\xE0\xD0\x80',
b'\x19\x1B\xF0\x00\x1E\xA4\xD2\x80\xF0\x00\x07\xF7\xD2\x80\xF0\x00\x22\x15\xD0\x80\xF0\x00\x07\xFB\xD2\x80',
b'\x19\x1B\xF0\x00\x22\x8F\xD0\x80\x40\x40\x22\xE1\xD2\x80\x40\x80\x22\xE2\xD2\x80\xF0\x00\x22\x9C\xD0\x80',
b'\x19\x1B\xF0\x00\x07\xFB\xD2\x80\xF0\x00\x22\xB6\xD0\x80\xF0\x00\x20\xF0\xD2\x80\x90\x02\x27\xDF\xD2\x80',
b'\x19\x1B\x9E\x69\x70\x00\xF0\x00\xF0\x00\x07\x00\xD1\x80\xF0\x00\x23\x20\xD0\x80\x90\x82\x0C\x29\x60\x09',
b'\x19\x1B\x40\x17\x40\x67\xE6\x40\xF0\x00\x70\x00\xF0\x00\xF0\x00\x32\x17\xD0\x08\xF0\x00\x07\xF7\xD2\x80',
b'\x19\x1B\xF0\x00\x27\xEA\xD2\x80\xF0\x00\x11\xB5\xD0\x80\x40\x55\x15\x17\x60\x08\xF0\x00\x1D\x40\x60\x00',
b'\x19\x1B\x31\x05\x1E\x60\x60\x01\x31\x85\x70\x00\xF0\x00\x32\x05\x70\x00\xF0\x00\x32\x85\x70\x00\xF0\x00',
b'\x19\x1B\x33\x00\x70\x00\xF0\x00\x33\x81\x0D\x8E\x60\x09\x34\x00\x02\x54\x60\x02\x34\x81\x38\x80\x60\x03',
b'\x19\x1B\x30\x12\x70\x00\xF0\x00\x30\x93\x70\x00\xD0\x08\x17\x0B\x60\x0C\xA1\x1E\x00\x40\x40\x05\xF0\x00',
b'\x19\x1B\x00\x41\x24\x3F\xD0\x80\xF0\x00\x0C\x83\x60\x08\x90\x00\x0C\x6B\x60\x0B\xF0\x00\x70\x0C\xE6\x00',
b'\x19\x1B\xF0\x00\x20\x03\xF0\x00\xF0\x00\x22\x04\xF0\x00\xF0\x00\x3B\xB3\xF0\x00\xF0\x00\x3C\x34\xD0\x08',
b'\x19\x1B\xF0\x00\x70\x00\xAD\xC1\xF0\x00\x0C\x8D\x60\x08\xF0\x00\x26\x0A\xD0\x80\x83\xFF\x0D\x9B\x60\x08',
b'\x19\x1B\xF0\x00\x01\xF4\x60\x00\xF0\x00\x03\xB1\x60\x01\x10\x00\x03\xB2\x60\x02\x10\x01\x04\x0E\x60\x00',
b'\x19\x1B\x10\x02\x04\x0F\x60\x01\x10\x00\x04\x5C\x60\x02\x10\x01\x04\x5D\x60\x00\x10\x02\x13\x80\x60\x01',
b'\x19\x1B\x10\x00\x0D\xAB\x60\x09\x10\x01\x02\xEE\x60\x00\x10\x07\x43\x06\x60\x01\x10\x10\x04\x69\x60\x02',
b'\x19\x1B\x10\x11\x44\x87\x60\x00\x10\x12\x05\xE3\x60\x01\x10\x10\x46\x08\x60\x02\x10\x11\x06\xAE\x60\x00',
b'\x19\x1B\x10\x12\x0D\xA4\x60\x08\x10\x10\x9E\x3C\x60\x00\x10\x17\x0D\xB3\x60\x09\x10\x00\x25\xDA\x60\x00',
b'\x19\x1B\x10\x07\x80\x3D\x60\x01\x10\x10\x28\x82\x60\x02\x10\x11\xC0\x3D\x60\x00\x10\x12\x28\x87\x60\x01',
b'\x19\x1B\x10\x10\xC0\x3B\x60\x02\x10\x11\x28\x8C\x60\x00\x10\x12\xC0\x3B\x60\x01\x10\x10\x28\x91\x60\x02',
b'\x19\x1B\x10\x11\xC0\x3B\x60\x00\x10\x12\x28\x96\x60\x01\x10\x10\xC0\x3B\x60\x02\x10\x11\x28\x9B\x60\x00',
b'\x19\x1B\x10\x12\xC0\x3B\x60\x01\x10\x10\x28\xA0\x60\x02\x10\x11\x40\x3C\x60\x00\x10\x12\x28\xA5\x60\x01',
b'\x19\x1B\x10\x10\xC0\x3C\x60\x02\x10\x11\x28\xAA\x60\x00\x10\x12\xC0\x3C\x60\x01\x10\x10\x28\xAF\x60\x02',
b'\x19\x1B\x10\x11\xC0\x3C\x60\x00\x10\x12\x28\xB4\x60\x01\x10\x10\xC0\x3C\x60\x02\x10\x11\x28\xB9\x60\x00',
b'\x19\x1B\x10\x12\xC0\x3C\x60\x01\x10\x10\x28\xBE\x60\x02\x10\x11\xC0\x3C\x60\x00\x10\x12\x29\xCC\x60\x01',
b'\x19\x1B\x10\x10\x00\x37\x60\x02\x10\x11\x29\xD1\x60\x00\x10\x12\x00\x37\x60\x01\x10\x10\x29\xD6\x60\x02',
b'\x19\x1B\x10\x11\x00\x37\x60\x00\x10\x12\x29\xDB\x60\x01\x10\x10\x00\x37\x60\x02\x10\x11\x0D\xD8\x60\x08',
b'\x19\x1B\x10\x12\x27\x15\x60\x00\x10\x17\x40\x3E\x60\x01\x10\x00\x27\x1A\x60\x02\x10\x01\x80\x3C\x60\x00',
b'\x19\x1B\x10\x02\x28\x64\x60\x01\x10\x00\x40\x3C\x60\x02\x10\x01\x28\x69\x60\x00\x10\x02\x40\x3C\x60\x01',
b'\x19\x1B\x10\x00\x28\x6E\x60\x02\x10\x01\x80\x3A\x60\x00\x10\x02\x28\x73\x60\x01\x10\x00\x80\x3A\x60\x02',
b'\x19\x1B\x10\x01\x28\xA0\x60\x00\x10\x02\x40\x3C\x60\x01\x10\x00\x29\xCC\x60\x02\x10\x01\x00\x37\x60\x00',
b'\x19\x1B\x10\x02\x29\xD1\x60\x01\x10\x00\x00\x37\x60\x02\x10\x01\x29\xD6\x60\x00\x10\x02\x00\x37\x60\x01',
b'\x19\x1B\x10\x00\x29\xDB\x60\x02\x10\x01\x00\x37\x60\x00\x10\x02\x0D\xEF\x60\x09\x10\x00\x70\x00\xF0\x00',
b'\x19\x1B\x10\x07\x70\x00\xF0\x00\x10\x17\x70\x00\xD0\x08\x0C\xDF\x60\x0B\xA0\xBE\x30\x30\x23\xD6\xD2\x80',
b'\x19\x1B\xF0\x00\x26\xE8\xD0\x80\x0D\x9B\x60\x08\xA0\xBB\xF0\x00\x00\x02\xA0\xBA\x90\x82\x70\x00\xF0\x00',
b'\x19\x1B\x82\x8A\x70\x00\x90\x03\x90\x8A\x70\x00\x90\x01\xF0\x00\x70\x00\x8F\xFB\x82\xBF\x70\x00\xF0\x00',
b'\x19\x1B\xF0\x00\x01\x99\xD2\x80\xF0\x00\x0D\x9A\x60\x08\xF0\x00\x26\xC1\xF0\x00\xF0\x00\x00\x02\xA0\xB1',
b'\x19\x1B\x90\x82\x70\x00\xF0\x00\x82\x8A\x70\x00\x90\x03\x90\x8A\x70\x00\x90\x01\xF0\x00\x70\x00\x8F\xFB',
b'\x19\x1B\x82\x80\x70\x00\xF0\x00\xF0\x00\x70\x00\xD0\x08\xF0\x00\x0D\xAB\x60\x0D\xF0\x00\x3F\xFF\x60\x02',
b'\x19\x1B\xF0\x00\x00\x51\xA0\xA8\xC2\x53\x70\x00\xF0\x00\x8E\xC4\x70\x00\x90\x01\xF0\x00\x70\x00\x97\xFC',
b'\x19\x1B\xD4\x8F\x01\x99\xD2\x80\x40\x05\x0D\xA4\x60\x0D\x40\x17\x3F\xFF\x60\x02\x9F\x7D\x00\x51\xA0\xA1',
b'\x19\x1B\xC2\x53\x70\x00\xF0\x00\x82\xC4\x27\x1C\xD1\x80\xF0\x00\x70\x00\x97\xFC\x91\x46\x27\x20\xD0\x80',
b'\x19\x1B\x40\x07\x01\x99\xD2\x80\xF0\x00\x0D\x8E\x60\x0E\x40\x07\x25\xC1\xA0\x9A\x9E\x79\x2E\x40\x40\x14',
b'\x19\x1B\x40\x36\x31\x67\x90\x19\x2F\x45\x19\x64\x60\x02\x4F\xF0\x1A\x5E\x60\x03\x83\x54\x40\x36\xF0\x00',
b'\x19\x1B\x83\x5C\x40\x00\xE2\x00\xF0\x00\x40\x10\xE2\x00\xF0\x00\x70\x00\xF0\x00\x90\x00\x70\x00\xF0\x00',
b'\x19\x1B\xF0\x00\x70\x00\x9C\x11\xF0\x00\x0D\xD8\x60\x0D\x40\x36\x22\xF0\xD2\x80\x0D\xB3\x60\x0D\xE6\x00',
b'\x19\x1B\x40\x14\x21\x40\xF0\x00\xF0\x00\x20\x51\xA0\x8B\x90\x41\x70\x00\xF0\x00\x82\x45\x70\x00\x90\x1D',
b'\x19\x1B\xF0\x00\x70\x00\x90\x01\xF0\x00\x70\xDC\x8F\xFB\x20\xD1\x3F\xFF\x60\x02\xF0\x00\x0C\xDF\x60\x0B',
b'\x19\x1B\xC2\x53\x31\x61\xF0\x00\xD4\x8E\x30\x33\xF0\x00\xD4\x4A\x37\xC6\xF0\x00\xC6\xA2\x70\x00\xF0\x00',
b'\x19\x1B\xC3\xA0\x3D\x42\xF0\x00\xF0\x00\x31\xE0\xD0\x08\xC6\x24\x31\xE0\xF0\x00\x90\x00\x3D\x44\xF0\x00',
b'\x19\x1B\x83\xB6\x70\x00\xE0\x40\x40\xD5\x21\x41\xA0\x7B\xCC\x0B\x40\x00\xF0\x00\x80\xED\x23\xEA\xD2\x80',
b'\x19\x1B\xBF\x60\x20\x60\xF0\x00\xF0\x00\x20\xE1\xF0\x00\xF0\x00\x23\xEA\xD2\x80\x90\xC6\x23\xDE\xD2\x80',
b'\x19\x1B\x4F\x95\x40\x14\xA0\x74\x81\x75\x70\x00\xF0\x00\xAF\x43\x70\x00\xF0\x00\xC2\xE0\x70\x00\xF0\x00',
b'\x19\x1B\x80\xC3\x0C\xDF\x60\x0B\xF0\x00\x33\x63\xF0\x00\xF0\x00\x34\xE3\xF0\x00\xF0\x00\x30\x33\xA0\x41',
b'\x19\x1B\xF0\x00\x70\x00\x80\x12\x40\xD5\x21\x41\xA0\x6B\xCC\x0B\x40\x00\xF0\x00\x80\xED\x23\xEA\xD2\x80',
b'\x19\x1B\xBF\x60\x20\x60\xF0\x00\xF0\x00\x20\xE1\xF0\x00\xF0\x00\x23\xEA\xD2\x80\x90\xC6\x23\xDE\xD2\x80',
b'\x19\x1B\x4F\x95\x40\x14\xA0\x64\x81\x75\x70\x00\x40\x06\xAF\x43\x70\x00\xF0\x00\xC2\xE0\x0C\xDF\x60\x0B',
b'\x19\x1B\xF0\x00\x31\xE0\xF0\x00\x80\xC3\x40\x36\xE6\x00\xC6\x24\x30\x33\xF0\x00\xF0\x00\x33\x63\xF0\x00',
b'\x19\x1B\xF0\x00\x34\xE3\xF0\x00\xF0\x00\x3D\x44\xF0\x00\xF0\x00\x37\xC6\xA0\x2E\xF0\x00\x23\x66\xA0\x31',
b'\x19\x1B\x82\x92\x0B\xB8\x60\x03\x47\xF4\x23\xE0\xD2\x80\x52\x08\x60\x05\x98\x03\x82\x92\x52\x08\x60\x03',
b'\x19\x1B\x47\xF4\x23\xE0\xD2\x80\x52\x08\x60\x05\x98\x23\xF0\x00\x33\xE4\xF0\x00\xF0\x00\x34\x65\xF0\x00',
b'\x19\x1B\xF0\x00\x35\x64\xF0\x00\xF0\x00\x35\xE5\xF0\x00\xF0\x00\x23\x66\xA0\x4E\x91\x8E\x70\x00\xF0\x00',
b'\x19\x1B\xF0\x00\x33\x66\xA0\x24\x82\x92\x52\x08\x60\x03\xF0\x00\x23\xE0\xD2\x80\xF0\x00\x70\x00\x9C\x05',
b'\x19\x1B\x82\x92\x0B\xB8\x60\x03\xF0\x00\x23\xE0\xD2\x80\xF0\x00\x70\x00\x9B\xF7\x0D\x94\x60\x0D\xA0\x2B',
b'\x19\x1B\xF0\x00\x70\x00\x8F\xF5\xF0\x00\x24\xE6\xA0\x43\x9F\xBE\x70\x00\xF0\x00\xF0\x00\x34\xE6\xA0\x19',
b'\x19\x1B\x82\x92\x52\x08\x60\x03\xF0\x00\x23\xE0\xD2\x80\xF0\x00\x70\x00\x9C\x05\x82\x92\x0B\xB8\x60\x03',
b'\x19\x1B\xF0\x00\x23\xE0\xD2\x80\xF0\x00\x70\x00\x9B\xF7\x0D\x97\x60\x0D\xA0\x20\xF0\x00\x70\x00\x8F\xF5',
b'\x19\x1B\x40\x14\x23\xE1\xA0\x38\xC2\x63\x25\x62\xF0\x00\xF0\x00\x24\x65\x90\x07\xC2\xA3\x25\xE6\xF0\x00',
b'\x19\x1B\x90\x80\x70\x00\x90\x02\x83\x77\x70\x00\xF0\x00\x25\x60\x23\xE0\xEB\xC0\x0C\xDF\x60\x0B\xA0\x31',
b'\x19\x1B\xF0\x00\x30\x30\xF0\x00\xF0\x00\x21\xE0\xD0\x08\xC2\xA3\x25\xE6\xF0\x00\xF0\x00\x70\x00\x93\xF9',
b'\x19\x1B\x90\x40\x70\x00\x8F\xFA\xF0\x00\x21\xE0\xAF\x0F\xF0\x00\x24\x62\xD2\x80\xF0\x00\x32\x60\xF0\x00',
b'\x19\x1B\xF0\x00\x32\xE1\xD0\x08\xF0\x00\x23\xED\xD2\x80\xB8\x68\x22\x60\xF0\x00\xF0\x00\x22\xE1\xF0\x00',
b'\x19\x1B\xF0\x00\x23\xEA\xD2\x80\xF0\x00\x23\xDE\xD2\x80\xA9\x88\x70\x00\xF0\x00\xAB\xF8\x23\xE4\xD2\x80',
b'\x19\x1B\x46\x43\x21\x42\xA0\x20\xA0\x98\x70\x00\xF0\x00\xF0\x00\x23\xE7\xD2\x80\xF0\x00\x23\xC6\xD2\x80',
b'\x19\x1B\x90\x00\x70\x00\xF0\x00\xF0\x00\x70\x00\xDC\x09\xF0\x00\x23\xCE\xD0\x80\x47\xE5\x70\x00\xF0\x00',
b'\x19\x1B\x40\x16\x20\xD3\xA0\x18\x83\x5D\x20\x52\xF0\x00\xC2\xF5\x21\x54\x98\x07\xC2\xB6\x70\x00\x90\x02',
b'\x19\x1B\xF0\x00\x70\x00\x90\x05\xF0\x00\x70\x00\x80\x02\xC2\xB6\x70\x00\xF0\x00\xF0\x00\x70\x00\xD4\x09',
b'\x19\x1B\x82\x64\x70\x00\xF0\x00\xF0\x00\x70\x00\xDC\x09\xF0\x00\x31\x51\xF0\x00\xF0\x00\x30\xD2\xD0\x08',
b'\x19\x1B\x0D\xEF\x60\x0B\xA0\x0C\x9E\x79\x20\x36\xF0\x00\xF0\x00\x20\x45\xF0\x00\x9F\xBC\x70\x00\xE0\x40',
b'\x19\x1B\x91\x45\x70\x00\xD0\x09\x26\x44\x27\x2D\xD5\x80\x91\x86\x70\x00\xF0\x00\xF0\x00\x27\x32\xD5\x80',
b'\x19\x1B\xF0\x00\x70\x00\xAF\x67\x2F\x41\x27\x36\xD0\x80\xF0\x00\x29\x15\xD2\x80\xF0\x00\x3B\x9E\xD2\x80',
b'\x19\x1B\xF0\x00\x28\x88\xD0\x80\xF0\x00\x70\x00\xD0\x08\xF0\x00\x16\xC3\x60\x08\xF0\x00\x00\x9A\x60\x00',
b'\x19\x1B\xF0\x00\x02\xE3\x60\x00\x10\x00\x04\xF4\x60\x00\x10\x00\x06\xFF\x60\x00\x10\x00\x09\x07\x60\x00',
b'\x19\x1B\x10\x00\x0B\x10\x60\x00\x10\x00\x0D\x1F\x60\x00\x10\x00\x0F\x65\x60\x00\x10\x00\x0F\x65\x60\x00',
b'\x19\x1B\x10\x00\x0D\x1F\x60\x00\x10\x00\x0B\x10\x60\x00\x10\x00\x09\x07\x60\x00\x10\x00\x06\xFF\x60\x00',
b'\x19\x1B\x10\x00\x04\xF4\x60\x00\x10\x00\x02\xE3\x60\x00\x10\x00\x00\x9A\x60\x00\xF0\x00\x10\x00\xF0\x00',
b'\x19\x1B\xF0\x00\x10\x00\xF0\x00\xF0\x00\x16\xD3\x60\x08\xF0\x00\xFF\x93\x60\x00\xF0\x00\xFE\x37\x60\x00',
b'\x19\x1B\x10\x00\xFD\xD9\x60\x00\x10\x00\xFE\x9F\x60\x00\x10\x00\x03\x85\x60\x00\x10\x00\x0D\x6B\x60\x00',
b'\x19\x1B\x10\x00\x16\x84\x60\x00\x10\x00\x1E\x49\x60\x00\x10\x00\x1E\x49\x60\x00\x10\x00\x16\x84\x60\x00',
b'\x19\x1B\x10\x00\x0D\x6B\x60\x00\x10\x00\x03\x85\x60\x00\x10\x00\xFE\x9F\x60\x00\x10\x00\xFD\xD9\x60\x00',
b'\x19\x1B\x10\x00\xFE\x37\x60\x00\x10\x00\xFF\x93\x60\x00\xF0\x00\x10\x00\xF0\x00\xF0\x00\x10\x00\xF0\x00',
b'\x19\x1B\xF0\x00\x16\xE3\x60\x08\xF0\x00\x00\x64\x60\x00\xF0\x00\xFF\xA8\x60\x00\x10\x00\xFF\xA6\x60\x00',
b'\x19\x1B\x10\x00\xFF\xDF\x60\x00\x10\x00\x00\x01\x60\x00\x10\x00\x01\x28\x60\x00\x10\x00\x01\x2F\x60\x00',
b'\x19\x1B\x10\x00\xFD\x23\x60\x00\x10\x00\xFD\xA1\x60\x00\x10\x00\x03\x89\x60\x00\x10\x00\x02\x54\x60\x00',
b'\x19\x1B\x10\x00\xFE\x7D\x60\x00\x10\x00\x00\x8C\x60\x00\x10\x00\xFB\xE1\x60\x00\x10\x00\xF9\x42\x60\x00',
b'\x19\x1B\x10\x00\x0C\x47\x60\x00\x10\x00\x0E\xA2\x60\x00\x10\x00\xEC\x43\x60\x00\x10\x00\xEA\xCE\x60\x00',
b'\x19\x1B\x10\x00\x17\x46\x60\x00\x10\x00\x17\x46\x60\x00\x10\x00\xEA\xCE\x60\x00\x10\x00\xEC\x43\x60\x00',
b'\x19\x1B\x10\x00\x0E\xA2\x60\x00\x10\x00\x0C\x47\x60\x00\x10\x00\xF9\x42\x60\x00\x10\x00\xFB\xE1\x60\x00',
b'\x19\x1B\x10\x00\x00\x8C\x60\x00\x10\x00\xFE\x7D\x60\x00\x10\x00\x02\x54\x60\x00\x10\x00\x03\x89\x60\x00',
b'\x19\x1B\x10\x00\xFD\xA1\x60\x00\x10\x00\xFD\x23\x60\x00\x10\x00\x01\x2F\x60\x00\x10\x00\x01\x28\x60\x00',
b'\x19\x1B\x10\x00\x00\x01\x60\x00\x10\x00\xFF\xDF\x60\x00\x10\x00\xFF\xA6\x60\x00\x10\x00\xFF\xA8\x60\x00',
b'\x19\x1B\x10\x00\x00\x64\x60\x00\xF0\x00\x10\x00\xF0\x00\xF0\x00\x10\x00\xF0\x00\xF0\x00\x17\x0B\x60\x08',
b'\x19\x1B\xF0\x00\x00\x03\x60\x00\xF0\x00\x54\xC0\x60\x00\x10\x00\x00\x05\x60\x00\x10\x00\x00\x05\x60\x00',
b'\x19\x1B\x10\x00\x00\x0F\x60\x00\x10\x00\x00\x0F\x60\x00\x10\x00\x09\xC0\x60\x00\x10\x00\x0A\x20\x60\x00',
b'\x19\x1B\x10\x00\x1D\x40\x60\x00\x10\x00\x1E\x60\x60\x00\xF0\x00\x10\x00\xF0\x00\xF0\x00\x10\x00\xF0\x00',
b'\x07\x1B\xF0\x00\x70\x00\xD0\x08',
b'\x03\x1c\x00\x00',                                        # end of "DSP_init" bytes
b'\x03\x1C\x00\x75',                                        # beginning of "LUT bytes"
b'\x19\x1B\x40\x13\x40\x2F\x41\x68\x41\xC1\x42\x14\x44\xDE\x44\xE9\x45\xFB\x46\x11\x47\xC5\x47\xFC\x4D\x5D',
b'\x19\x1B\x4E\x56\x4E\x58\x4E\x5B\x4D\x83\x4E\x0A\x4E\x0B\x4E\x49\x4E\x53\x4F\x92\x4F\xEA\x50\x41\x50\x74',
b'\x19\x1B\x50\x80\x56\x60\x56\xD4\x56\xD9\x58\x29\x59\xB4\x5A\x3A\x5B\x79\x5B\xA2\x5B\xEF\x5D\xDC\x60\x3A',
b'\x19\x1B\x60\x88\x60\xA8\x61\x9F\x61\xB6\x61\xDF\x62\x14\x62\x59\x62\x9B\x62\xA1\x63\x69\x64\x3B\x66\x09',
b'\x11\x1B\x66\xE7\x67\x0B\x67\x1A\x67\x29\x68\x87\x68\x99\x68\xA7\x68\xB2',
b'\x03\x1c\x00\x00',                                        # end of "LUT bytes"
b'\x03\x14\x00\x01'                                         # "start" command
]

PARAMETER_BYTE_ARRAY = [b'\x05\x20\x14\x01\x00\x01',                              # FM_Set_MphSuppression(1,1)
                        b'\x05\x20\x16\x01\x00\x01',                              # FM_Set_ChannelEqualizer(1,1)
                        b'\x09\x20\x36\x01\x00\x03\x00\x78\x00\xA0',              # FM_Set_HighCut_Mph(1,3,120,160)
                        b'\x07\x20\x37\x01\x00\x01\x09\x60',                      # FM_Set_HighCut_Max(1,1,2400)
                        b'\x07\x20\x39\x01\x00\x01\x00\x64',                      # FM_Set_Lowcut_Max(1,100)
                        b'\x09\x20\x40\x01\x00\x03\x00\x64\x00\x96',              # FM_Set_Stereo_Mph(1,3,100,150)
                        b'\x09\x20\x3E\x01\x00\x03\x01\xCC\x00\xF0',              # FM_Set_Stereo_Level (1, 3, 460, 240)
                        b'\x11\x20\x3C\x01\x00\xC8\x0F\xA0\x00\x14\x00\x50',      # FM_Set_Stereo_Time (1, 200, 4000, 20, 80)
                        b'\x11\x20\x3D\x01\x00\x00\x00\xD2\x00\x5A\x01\xF4',      # FM_Set_Stereo_Mod (1, 0, 210, 90, 500)
                        b'\x07\x20\x42\x01\x00\x00\x01\x90',                      # FM_Set_Stereo_Min (1, 0, 400)
                        b'\x05\x20\x41\x01\x00\x01',                              # FM_Set_Stereo_Max (1, 1)
                        b'\x09\x20\x48\x01\x00\x03\x02\x58\x00\xF0',              # FM_Set_StHiBlend_Level (1, 3, 600, 240)
                        b'\x11\x20\x46\x01\x01\xF4\x07\xD0\x00\x14\x00\x14',      # FM_Set_StHiBlend_Time (1, 500, 2000, 20, 20)
                        b'\x11\x20\x47\x01\x00\x00\x00\xF0\x00\x78\x02\x9E',      # FM_Set_StHiBlend_Mod (1, 0, 240, 120, 670)
                        b'\x09\x20\x4A\x01\x00\x03\x00\x50\x00\x8C',              # FM_Set_StHiBlend_Mph (1, 3, 80, 140)
                        b'\x09\x20\x49\x01\x00\x03\x00\x50\x00\x8C',              # FM_Set_StHiBlend_Noise (1, 3, 80, 140)
                        b'\x07\x20\x4C\x01\x00\x00\x1B\x58',                      # FM_Set_StHiBlend_Min (1, 0, 7000)
                        b'\x07\x20\x4B\x01\x00\x01\x0F\xA0',                      # FM_Set_StHiBlend_Max (1, 1, 4000)
                        b'\x07\x20\x01\x01\x00\x01\x26\x52',                      # FM_Tune_To (1, 1, 9810)
                        b'\x05\x30\x0B\x01\x00\x00'                               # AUDIO_Set_Mute(0) = off
                        ]

GET_OPERATION_BYTE_ARRAY = b'\x03\x40\x80\x01'

CRYSTAL_BYTE_ARRAY = [b'\x09\x40\x04\x01\x00\x8C\xA0\x00\x00\x00', # set crystal oscillator frequency
b'\x05\x40\x05\x01\x00\x01' # activate crystal oscillator
]

PARAMETER_BYTE_ARRAY = [b'\x05\x20\x14\x01\x00\x01',                              # FM_Set_MphSuppression(1,1)
                        b'\x05\x20\x16\x01\x00\x01',                              # FM_Set_ChannelEqualizer(1,1)
                        b'\x09\x20\x36\x01\x00\x03\x00\x78\x00\xA0',              # FM_Set_HighCut_Mph(1,3,120,160)
                        b'\x07\x20\x37\x01\x00\x01\x09\x60',                      # FM_Set_HighCut_Max(1,1,2400)
                        b'\x07\x20\x39\x01\x00\x01\x00\x64',                      # FM_Set_Lowcut_Max(1,100)
                        b'\x09\x20\x40\x01\x00\x03\x00\x64\x00\x96',              # FM_Set_Stereo_Mph(1,3,100,150)
                        b'\x09\x20\x3E\x01\x00\x03\x01\xCC\x00\xF0',              # FM_Set_Stereo_Level (1, 3, 460, 240)
                        b'\x11\x20\x3C\x01\x00\xC8\x0F\xA0\x00\x14\x00\x50',      # FM_Set_Stereo_Time (1, 200, 4000, 20, 80)
                        b'\x11\x20\x3D\x01\x00\x00\x00\xD2\x00\x5A\x01\xF4',      # FM_Set_Stereo_Mod (1, 0, 210, 90, 500)
                        b'\x07\x20\x42\x01\x00\x00\x01\x90',                      # FM_Set_Stereo_Min (1, 0, 400)
                        b'\x05\x20\x41\x01\x00\x01',                              # FM_Set_Stereo_Max (1, 1)
                        b'\x09\x20\x48\x01\x00\x03\x02\x58\x00\xF0',              # FM_Set_StHiBlend_Level (1, 3, 600, 240)
                        b'\x11\x20\x46\x01\x01\xF4\x07\xD0\x00\x14\x00\x14',      # FM_Set_StHiBlend_Time (1, 500, 2000, 20, 20)
                        b'\x11\x20\x47\x01\x00\x00\x00\xF0\x00\x78\x02\x9E',      # FM_Set_StHiBlend_Mod (1, 0, 240, 120, 670)
                        b'\x09\x20\x4A\x01\x00\x03\x00\x50\x00\x8C',              # FM_Set_StHiBlend_Mph (1, 3, 80, 140)
                        b'\x09\x20\x49\x01\x00\x03\x00\x50\x00\x8C',              # FM_Set_StHiBlend_Noise (1, 3, 80, 140)
                        b'\x07\x20\x4C\x01\x00\x00\x1B\x58',                      # FM_Set_StHiBlend_Min (1, 0, 7000)
                        b'\x07\x20\x4B\x01\x00\x01\x0F\xA0',                      # FM_Set_StHiBlend_Max (1, 1, 4000)
                        b'\x07\x20\x01\x01\x00\x01\x26\x52',                      # FM_Tune_To (1, 1, 9810)
                        b'\x05\x30\x0B\x01\x00\x00'                               # AUDIO_Set_Mute(0) = off
                        ]

#--------------------------------------------- CLASS ------------------------------------------------

class TEF6686:
    
    
    def __init__(self, DEVICE = 'ESP32', I2C_SDA = None, I2C_SCL = None, I2C_HW_ESP = -1):               #, dbg = False):
        
        self.__I2C_SDA__ = I2C_SDA
        self.__I2C_SCL__ = I2C_SCL
        self.__DEVICE__ = DEVICE
        self.__I2C_HW_ESP__ = I2C_HW_ESP
        
        self.FREQ = 8750
        self.BAND = 'FM'
        self.RF_LEVEL = 0
        
        self.__TUNER_FOUND__ = False
        self.__TUNER_STATUS__ = None
        self.__RF_LVL_OFFSET__ = 8                                  # raw value when no signal is present
        
        #---------------------- RDS-specific variables ------------
        
        # public variables
        self.RDS_ON = False
        self.RDS_TP = False
        self.RDS_PTY = ''
        self.VOLUME_GAIN = 0                                       # default volume gain: 0dB
        self.RDS_ACQUIRING = False
        self.RDS_ACQUIRED = False
        self.RDS_PI = '----'
        self.RDS_PS = '--------'
        self.RDS_RT = '--------------------------------'
        self.AF_list = []
        # non-public variables
        self.__AF_NO__ = 0                                        # number of alternative frequencies (0: not updated)
        self.__PS_OFFSET__ = [False, False, False, False]
        self.__AF_LIST_UNCHANGED__ = 0
        self.__RT_OFFSET__ = []
        self.__PS_LIST__ = ['--','--', '--', '--']
        self.__RT_LIST__ = ['--','--', '--', '--', '--','--', '--', '--', '--','--', '--', '--', '--','--', '--', '--']
        
        if self.__DEVICE__ == 'ESP32':
            
            if I2C_SDA == None or I2C_SCL == None:
                print("Please specify SDA and SCL pins!")
                
            else:
                from machine import Pin, I2C
                
                if self.__I2C_HW_ESP__ == -1:
                    print("Initializing software I2C bus at ESP32 pins ", I2C_SDA, " (SDA) and ", I2C_SCL, " (SCL) ...")
                    self.__i2c__ = I2C( sda = Pin(self.__I2C_SDA__), scl = Pin(self.__I2C_SCL__), freq = I2C_FREQ )
                    
                elif self.__I2C_HW_ESP__ == 0:
                    print("Initializing hardware I2C bus ", I2C_HW_ESP, " at ESP32 pins ", I2C_SDA, " (SDA) and ", I2C_SCL, " (SCL) ...")
                    self.__i2c__ = I2C(self.__I2C_HW_ESP__, sda = Pin(self.__I2C_SDA__), scl = Pin(self.__I2C_SCL__), freq = I2C_FREQ )
            
        elif self.__DEVICE__ == 'RPi':
            
            print("Initializing Raspberry Pi's I2C bus...")
            from smbus import SMBus
            self.__i2c__ = SMBus(1)
            
        else:
            print("Unsupported I2C host device!")
        
        self.search_for_tuner()


    def i2c_write_line(self, line):
        
        if self.__DEVICE__ == 'ESP32':
            self.__i2c__.writeto(I2C_TEF6686, line[1:])
        
        elif self.__DEVICE__ == 'RPi':
            DATA_LIST = [line_element for line_element in line][1:]
            self.__i2c__.write_i2c_block_data(I2C_TEF6686,DATA_LIST[0],DATA_LIST[1:])
    
    
    def i2c_read(self, byte_no):                         # byte_no: number of bytes to read
        
        if self.__DEVICE__ == 'ESP32':
            RESULT_ARRAY = bytearray(byte_no)
            self.__i2c__.readfrom_into(I2C_TEF6686, RESULT_ARRAY)
            return RESULT_ARRAY
        
        elif self.__DEVICE__ == 'RPi':
            RAW_DATA = self.__i2c__.read_i2c_block_data(I2C_TEF6686,2) # not sure if "2" does anything!
            RESULT_ARRAY = bytearray(RAW_DATA[12:12+byte_no])
            return RESULT_ARRAY

        
    def search_for_tuner(self, dbg = False):
        
        print("Searching for tuner module at I2C adress ", hex(I2C_TEF6686),"...")
        
        if self.__DEVICE__ == 'ESP32':
            
            I2C_DEVICES = None
            I2C_DEVICES = self.__i2c__.scan()
                    
        elif self.__DEVICE__ == 'RPi':
            
            I2C_DEVICES = []
            
            for address in range(128):
                try:
                    self.__i2c__.read_byte(address)
                    I2C_DEVICES.append(address)
                except:                       # exception if read_byte fails
                    pass
                
        if dbg == True:
            print(I2C_DEVICES)
        
        if I2C_DEVICES == []:
            raise OSError('No I2C devices detected, check I2C wiring!')
    
        for dev in I2C_DEVICES:
            if hex(dev) == hex(I2C_TEF6686):
                print("Tuner module detected!")
                self.__TUNER_FOUND__ = True
            else:
                raise OSError('Tuner module not detected, check I2C wiring!')
        
        
    @classmethod
    def expand_bin_str(self,BIN_STRING, LENGTH):
    
        ZERO_STRING = '0000000000000000'
        MISSING_DIGITS = LENGTH - len(BIN_STRING[2:])                                         # digits to add while omitting '0b'
        OUTPUT_STRING = ZERO_STRING[:MISSING_DIGITS] + BIN_STRING[2:]
        return OUTPUT_STRING
    
    
    def patch_tuner(self):
        
        print("Patching tuner...")
        
        for line in TUNER_PATCH_BYTES:
            self.i2c_write_line(line)
    
    
    def start_oscillator(self):
        
        print("Activating crystal oscillator...")
        
        for line in CRYSTAL_BYTE_ARRAY:
            self.i2c_write_line(line)


    def load_settings(self):
        
        print("Applying settings...")

        for line in PARAMETER_BYTE_ARRAY:
            self.i2c_write_line(line)
        
        if self.__DEVICE__ == 'ESP32':
            time.sleep_ms(200)
        
        elif self.__DEVICE__ == 'RPi':
            time.sleep(0.2)
                     
        self.i2c_write_line(b'\x09\x20\x51\x01\x00\x01\x00\x02\x00\x00')         # automatic un-muting after tuning
        
        
    def init(self):
        
        self.search_for_tuner()
        self.check_tuner_status()                                                       # Tuner should now be in status "0" (inactive)
        
        if self.__DEVICE__ == 'RPi':
            time.sleep(0.05)                                                            # sleep for 50 ms
        elif self.__DEVICE__ == 'ESP32':
            time.sleep_ms(50)
            
        if self.__TUNER_FOUND__ == True and self.__TUNER_STATUS__ == 0:
            
            self.patch_tuner()                                                          # Tuner should now be in status "1"
            
            if self.__DEVICE__ == 'RPi':
                time.sleep(0.1)                                                         # sleep for 100 ms
            elif self.__DEVICE__ == 'ESP32':
                time.sleep_ms(100)
            
            self.check_tuner_status()
            
            if self.__TUNER_STATUS__ == 1:
                
                self.start_oscillator()                                                     # Tuner should now be in status "2"
                
                if self.__DEVICE__ == 'RPi':
                    time.sleep(0.2)                                                         # sleep for 200 ms
                elif self.__DEVICE__ == 'ESP32':
                    time.sleep_ms(200)
            
                self.check_tuner_status()
            else:
                raise OSError('Tuner is NOT as expected in INACTIVE (1) state, but in state ', self.__TUNER_STATUS__ )

                
            if self.__TUNER_STATUS__ == 2:
                    
                self.load_settings()
                
                if self.__DEVICE__ == 'RPi':
                    time.sleep(0.2)                                                         # sleep for 200 ms
                elif self.__DEVICE__ == 'ESP32':
                    time.sleep_ms(200)
                
                self.check_tuner_status()
            else:
                raise OSError('Tuner is NOT as expected in RADIO STANDBY (2) state, but in state ', self.__TUNER_STATUS__ )
                    
            if self.__TUNER_STATUS__ == 3:
                print("Tuner successfully initialized, found in ACTIVE state!")
                self.tune_to('FM',8750)
                
            else:
                raise OSError('Tuner is NOT as expected in ACTIVE (3) state, but in state ', self.__TUNER_STATUS__)
        
        else:
            if self.__TUNER_STATUS__ == 3:
                print("Tuner already found in ACTIVE state!")
            else:
                raise OSError('Error in I2C communication with tuner. Did you unplug any cables?')
            
        
    def tune_to(self, BAND, FREQ):
        
        print("Tuning to frequency ", FREQ, "in band ", BAND)

        TUNE_TO_BYTE_ARRAY = b''
    
        if BAND == 'FM':
            if FREQ < 8750 or FREQ > 10800:
                raise ValueError('Frequency ', FREQ,' is invalid in band FM!')
            else:
                self.FREQ = FREQ
                self.BAND = BAND
                TUNE_TO_BYTE_ARRAY += b'\x07\x20\x01\x01\x00\x01'
                TUNE_TO_BYTE_ARRAY += self.FREQ.to_bytes(2, 'big')
        
        elif BAND == 'MW':
            if FREQ < 522 or FREQ > 1710:
                raise ValueError('Frequency ', FREQ, 'is invalid in band MW!')
            else:
                self.FREQ = FREQ
                self.BAND = BAND
                TUNE_TO_BYTE_ARRAY += b'\x07\x21\x01\x01\x00\x01'
                TUNE_TO_BYTE_ARRAY += self.FREQ.to_bytes(2, 'big')
        
        elif BAND == 'SW':
            if FREQ < 2300 or FREQ > 27000:
                raise ValueError('Frequency ', FREQ, 'is invalid in band SW!')
            else:
                self.FREQ = FREQ
                self.BAND = BAND
                TUNE_TO_BYTE_ARRAY += b'\x07\x21\x01\x01\x00\x01'
                TUNE_TO_BYTE_ARRAY += self.FREQ.to_bytes(2, 'big')
        
        elif BAND == 'LW':
            if FREQ < 144 or FREQ > 288:
                raise ValueError('Frequency ', FREQ, 'is invalid in band SW!')
            else:
                self.FREQ = FREQ
                self.BAND = BAND
                TUNE_TO_BYTE_ARRAY += b'\x07\x21\x01\x01\x00\x01'
                TUNE_TO_BYTE_ARRAY += self.FREQ.to_bytes(2, 'big')
    
        elif BAND == 'OIRT' or BAND == 'LW':
            raise ValueError('Band not yet implemented!')
        else:
            raise ValueError('Please choose a valid band (FM/MW/LW/SW)"')
        
        self.i2c_write_line(TUNE_TO_BYTE_ARRAY)
        
        # Reset station-dependent parameters
        self.RDS_PI = '----'
        self.RDS_PS = '--------'
        self.RDS_RT = '--------------------------------'
        self.RDS_PTY = ''
        self.RDS_TP = False
        self.AF_LIST = []
        self.RDS_ACQUIRED = False
        self.RDS_ACQUIRING = False
        self.__PS_OFFSET__ = [False, False, False, False]
        self.__RT_OFFSET__ = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
        self.__AF_NO__ = 0
        self.__AF_LIST_UNCHANGED__ = 0
        self.__PS_LIST__ = ['--','--', '--', '--']
        self.__RT_LIST__ = ['--','--', '--', '--', '--','--', '--', '--', '--','--', '--', '--', '--','--', '--', '--']
        
        
    def tune_step(self, mode = 'UP', step = 10, dbg = False):                                   # default step: 100 kHz
        
        CURRENT_FREQ = self.FREQ
        
        if mode == 'UP' and self.BAND == 'FM':
            NEW_FREQ = CURRENT_FREQ + step
        elif mode == 'DOWN' and self.BAND == 'FM':
            NEW_FREQ = CURRENT_FREQ - step
            
        if NEW_FREQ > 10800:
            NEW_FREQ = 8750
        elif NEW_FREQ < 8750:
            NEW_FREQ = 10800
        
        if dbg == True:
            print ("Will now tune to frequency ", NEW_FREQ, "in current band ", self.BAND,"!")
        
        self.tune_to(self.BAND, NEW_FREQ)
        

    def seek(self, mode = 'UP', sens = 'local'):
        
        if sens == 'local':
            RF_threshold_level = 40
        elif sens == 'DX':
            RF_threshold_level = 15
            
        RF_abs_level = self.__RF_LVL_OFFSET__
        
        self.i2c_write_line(b'\x05\x30\x0B\x01\x00\x01')                          # muting while searching
        
        while RF_abs_level < RF_threshold_level:
            self.tune_step(mode, step = 10)
            time.sleep(0.05)
            RF_abs_level = self.get_signal_info()[0]
            time.sleep(0.01)
        
        self.i2c_write_line(b'\x05\x30\x0B\x01\x00\x00')                          # un-mute
        
        print("Stopped seek at ", self.FREQ)
        return self.FREQ
        

    def set_volume_gain(self, VOLUME_GAIN = 0, dbg = False):                      # sets volume GAIN(!): -599 to +240 possible (default: 0)
        
        self.VOLUME_GAIN = VOLUME_GAIN
        print("Setting volume to ", self.VOLUME_GAIN, "...")
        VOL_BYTE_ARRAY = b''
        VOL_BYTE_ARRAY += b'\x05\x30\x0A\x01'
        VOL_BYTE_ARRAY += self.VOLUME_GAIN.to_bytes(2, byteorder = 'big', signed = True)
        
        if dbg == True:
            print(VOL_BYTE_ARRAY)
            
        self.i2c_write_line(VOL_BYTE_ARRAY)
        
        
    def check_tuner_status(self):
        
        self.i2c_write_line(GET_OPERATION_BYTE_ARRAY)
        RESULT_ARRAY = self.i2c_read(2)
            
        if RESULT_ARRAY == b'\x00\x00':
            print("Tuner found in INACTIVE state...")
            self.__TUNER_STATUS__ = 0
            
        elif RESULT_ARRAY == b'\x00\x01':
            print("Tuner found in IDLE state...")
            self.__TUNER_STATUS__ = 1
            
        elif RESULT_ARRAY == b'\x00\x02':
            print("Tuner found in RADIO STANDBY state...")
            self.__TUNER_STATUS__ = 2
            
        elif RESULT_ARRAY == b'\x00\x03':
            print("Tuner found in ACTIVE state...")
            self.__TUNER_STATUS__ = 3
    
    
    def get_signal_info(self, mode = 'fast', dbg = False):                                      # 'fast' mode: returns signal strength (in dBµV), stereo; 'full': also RDS availability
        
        if mode == 'fast':                                                                      # available 2ms after tuning
            
            self.i2c_write_line(b'\x03\x20\x80\x01')                                            # get fast quality status (no additional data like IF bandwidth, multipath detection etc
            result = self.i2c_read(4)
            RF_level = 0.1 * int.from_bytes(result[2:4], 'big')
            
            self.i2c_write_line(b'\x03\x20\x85\x01')
            result = self.i2c_read(2)
        
            if result == b'\x80\x00':
                FM_stereo = True
            else:                                                                                # when no explicit stereo bit is received, i.e., result == b'\x00\x00':
                FM_stereo = False

            return RF_level, FM_stereo
        
        if mode == 'full':
            
            self.i2c_write_line(b'\x03\x20\x81\x01')
            result = self.i2c_read(14)
            RF_level = 0.1 * int.from_bytes(result[2:4], 'big')
        
            self.i2c_write_line(b'\x03\x20\x85\x01')
            result = self.i2c_read(2)
        
            if result == b'\x80\x00':
                FM_stereo = True
            else:                                                                                # when no explicit stereo bit is received, i.e., result == b'\x00\x00':
                FM_stereo = False
        
            self.i2c_write_line(b'\x03\x20\x82\x01')
            result = self.i2c_read(2)
        
            if result == b'\xC2\x00' or result == b'\x82\x00':
                RDS_available = True
            else:
                RDS_available = False
        
            #if dbg == True:
            #    print(RF_level, " dBµV, Stereo: ", FM_stereo, " RDS: ", RDS_available)
        
            return RF_level, FM_stereo, RDS_available
    
            
    def get_RDS_data(self, pause_time = 70, repeat = True, dbg = False):                                   # 70 ms pause_time gives best results in terms of RDS CRC errors
    
        self.i2c_write_line(b'\x03\x20\x83\x01')                                            # get all available RDS info               
        result = self.i2c_read(12)                                                          # according to datasheet: 12 bytes returned, e.g., b'\xc2\x00\xde\x1f\x04\x0f\xcb\xcdM \x00\x00\x00\x15\xde\xad'                                                                        # list to collect PIs from several polls
        
        #if dbg == True:
        #    print("-----------------------------------------")
        #    print("Received: ", result, result[0:2])
        
        RDS_STATUS_DATA = self.expand_bin_str( bin(int.from_bytes(result[0:2], 'big')) , 16)
        CRC_DATA = self.expand_bin_str( bin(int.from_bytes(result[10:12], 'big')) , 16)
        
        if result[0:2] == b'\xC2\x00' or result[0:2] == b'\x82\x00':                        # indicates that RDS was successfully decoded
            
            self.RDS_ACQUIRING = True
            
            if CRC_DATA[0:2] == '00' or CRC_DATA[0:2] == '01':
                self.RDS_PI = "".join("%02x" % i for i in bytearray(result[2:4]))
            
            #if dbg == True:
            #    print("RDS PI:", self.RDS_PI, " CRC: ", CRC_DATA[0:2])

            RDS_BLOCK_B = self.expand_bin_str( bin(int.from_bytes(result[4:6], 'big')) , 16)
            BLOCK_B_ERROR = CRC_DATA[2:4]                                                  # check block B error to see if the PS offset is wrong           
            RDS_BLOCK_C =  result[6:8]
            BLOCK_C_ERROR = CRC_DATA[4:6]
            RDS_BLOCK_D = result[8:10]
        
            if self.RDS_ACQUIRING == True and RDS_BLOCK_B[0:5] == '00000':                                                # check if received group is '0A' (containing PS)
                
                #print("-----------------------------------------")
                
                #if dbg == True:
                #    print("Group type 0A detected!")
                #    print("Status data: ", RDS_STATUS_DATA, " CRC data: ", CRC_DATA)
                #    print("RDS block C: ", RDS_BLOCK_C, " Error: ", BLOCK_C_ERROR)
                
                if BLOCK_B_ERROR == '00' or BLOCK_B_ERROR == '01':
                    self.RDS_TP = RDS_BLOCK_B[5]
                    self.RDS_PTY = RDS_BLOCK_B[6:11]
            
                offset = int(RDS_BLOCK_B[-2]) * 2 + int(RDS_BLOCK_B[-1]) * 1                # calculate offset of received PS fraction
                
                #------------------------------------ DECODE RDS PS ---------------------------------
                
                try:
                
                    PS_FRACTION = RDS_BLOCK_D.decode('UTF-8')
                    PS_ERROR = CRC_DATA[6:8]                      
                    
                    if dbg == True:
                        print("Offset: ", offset, "Error: ", OFFSET_ERROR," Fraction :", PS_FRACTION, " Error: ", PS_ERROR)
                    
                    if PS_ERROR == '00' or PS_ERROR == '01':                               # acceptable PS error (either none or corrected)
                        
                        if self.__PS_OFFSET__[offset] == False:
                            self.__PS_LIST__[offset] = PS_FRACTION
                            if BLOCK_B_ERROR == '00' or BLOCK_B_ERROR == '01':
                                self.__PS_OFFSET__[offset] = True
                        
                        self.RDS_PS = self.__PS_LIST__[0] + self.__PS_LIST__[1] + self.__PS_LIST__[2] + self.__PS_LIST__[3]
                    else:
                        pass
                    
                    #-------------------------- DECODE ALTERNATIVE FREQUENCIES -----------------
 
                    for __AF__ in RDS_BLOCK_C:
                        __AF__ = int(__AF__)*0.1 + 87.5
                        if not __AF__ in self.AF_LIST and __AF__ < 107.9 and BLOCK_C_ERROR == '00':
                            self.AF_LIST.append(__AF__)
                        #else:
                            #self.__AF_LIST_UNCHANGED__ = self.__AF_LIST_UNCHANGED__ + 1
                    
                    #--------------------------------- SHOW RESULTS ---------------------------
                    
                    if dbg == True:
                        print("PTY: ", self.RDS_PTY)
                        print("TP: ", self.RDS_TP)
                        print("AFs: ", self.AF_LIST)
                        print("PS name: ", self.RDS_PS, "Received segments: ", self.__PS_OFFSET__ )
                    
                    #if self.__AF_LIST_UNCHANGED__ > 30:                                             # 30 iterations without new AF: consider list as complete
                    #    print("AF list probably complete!")
                
                except:                                                                             # this catches unsuccessful decoding of character
                    if dbg == True:
                        print("Error decoding character...")
                    pass
            
            #----------------- PROCESS GROUP TYPE 2A (INCLUDING RADIO TEXT) ------------------
                
            elif self.RDS_ACQUIRING == True and RDS_BLOCK_B[0:5] == '00100':
                
                #if dbg == True:
                    #print("Group type 2A detected!")
                
                offset = int(RDS_BLOCK_B[-4])*8 + int(RDS_BLOCK_B[-3]) * 4 + int(RDS_BLOCK_B[-2]) * 2 + int(RDS_BLOCK_B[-1]) * 1 
                
                try:
                    RT_FRACTION = RDS_BLOCK_C.decode('UTF-8') + RDS_BLOCK_D.decode('UTF-8')
                    self.__RT_LIST__[offset] = RT_FRACTION
                    self.RDS_RT = list(accumulate(self.__RT_LIST__))[-1]
                    print("RT: ", self.RDS_RT)
                except:
                    if dbg == True:
                        print("Error decoding character...")
                    pass
        
            RDS_data_dict = {'PI': self.RDS_PI, 'PS': self.RDS_PS, 'RT': self.RDS_RT, 'TP': self.RDS_TP }
            yield RDS_data_dict
        
        
        if repeat == True:                                                                        # disables continuous polling if library is controlled by a program's main loop
            
            if self.RDS_ACQUIRING == True and self.RDS_ACQUIRED == False:
                if self.__DEVICE__ == 'ESP32':
                    time.sleep_ms(pause_time)
                elif self.__DEVICE__ == 'RPi':
                    time.sleep(pause_time/1000)
                    
            self.get_RDS_data(pause_time, repeat, dbg)
            

#------------------------- OUTDATED CODE FOR ESP32, TO BE CHECKED! ----------------------------------------
            
#     def get_RDS_data_ESP32(self, pause_time):
#     
#         self.__i2c__.writeto(0x64, b'\x20\x83\x01')             # get all available info
#         result = bytearray(12)
#         self.__i2c__.readfrom_into(0x64, result)                # example: b'\xc2\x00\xde\x1f\x04\x0f\xcb\xcdM \x00\x00\x00\x15\xde\xad'
#     
#         if result[0:2] == b'\xC2\x00':
#             
#             if self.RDS_ACQUIRING == False:
#                 self.RDS_PI = "".join("%02x" % i for i in bytearray(result[2:4]))
#                 print("RDS PI is ", self.RDS_PI)
#                 self.RDS_ACQUIRING = True
#                 
#             else:
#                 self.RDS_PI_CHECK = "".join("%02x" % i for i in bytearray(result[2:4]))
#                 print("RDS PI is ", self.RDS_PI_CHECK)
#     
#         RDS_BLOCK_B = self.expand_bin_str( bin(int.from_bytes(result[4:6], 'big')) , 16)                                      # containts the RDS PS
#     
#         if RDS_BLOCK_B[0:5] == '00000':
#             
#             self.RDS_TP = RDS_BLOCK_B[5]
#             offset = int(RDS_BLOCK_B[-2]) * 2 + int(RDS_BLOCK_B[-1]) * 1
#             PS_FRACTION = result[8:10].decode('UTF-8')
#             #try:
#             if offset == 0:
#                 self.RDS_PS = self.RDS_PS[0].replace(self.RDS_PS[0], PS_FRACTION[0]) + self.RDS_PS[1].replace(self.RDS_PS[1], PS_FRACTION[1]) + self.RDS_PS[2:]
#                 if self.RDS_PI_CHECK == self.RDS_PI:                    # only if PI code hasn't changed: update PS
#                     self.RDS_PS_OFFSET_0 = True
#                     
#             elif offset == 1:
#                 self.RDS_PS = self.RDS_PS[0:2] + self.RDS_PS[2].replace(self.RDS_PS[2], PS_FRACTION[0]) + self.RDS_PS[3].replace(self.RDS_PS[3], PS_FRACTION[1]) + self.RDS_PS[4:]
#                 if self.RDS_PI_CHECK == self.RDS_PI:
#                     #print("PI hasn't changed")
#                     self.RDS_PS_OFFSET_1 = True
#                     
#             elif offset == 2:
#                 self.RDS_PS = self.RDS_PS[0:4] + self.RDS_PS[4].replace(self.RDS_PS[4], PS_FRACTION[0]) + self.RDS_PS[5].replace(self.RDS_PS[5], PS_FRACTION[1]) + self.RDS_PS[6:]
#                 if self.RDS_PI_CHECK == self.RDS_PI:
#                     #print("PI hasn't changed")
#                     self.RDS_PS_OFFSET_2 = True
#             else:
#                 self.RDS_PS = self.RDS_PS[0:6] + self.RDS_PS[6].replace(self.RDS_PS[6], PS_FRACTION[0]) + self.RDS_PS[7].replace(self.RDS_PS[7], PS_FRACTION[1])
#                 if self.RDS_PI_CHECK == self.RDS_PI:
#                     #print("PI hasn't changed")
#                     self.RDS_PS_OFFSET_3 = True
#             
#             #print("Group 0A detected!")
#             print("PTY: ", RDS_BLOCK_B[6:11])
#             print("Traffic program: ", RDS_BLOCK_B[5])
#             print("PS name: ", self.RDS_PS)
#             
#         if self.RDS_ACQUIRING == True and self.RDS_PS_OFFSET_0 == True and self.RDS_PS_OFFSET_1 == True and self.RDS_PS_OFFSET_2 == True and self.RDS_PS_OFFSET_3 == True:
#             self.RDS_ACQUIRED = True
#             
#         if self.RDS_ACQUIRING == True and self.RDS_ACQUIRED == False:
#             sleep_ms(pause_time)
#             self.get_RDS_data(pause_time)
